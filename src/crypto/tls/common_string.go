// Code generated by "stringer -type=SignatureScheme,CurveID,ClientAuthType -output=common_string.go"; DO NOT EDIT.

package tls

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PKCS1WithSHA256-1025]
	_ = x[PKCS1WithSHA384-1281]
	_ = x[PKCS1WithSHA512-1537]
	_ = x[PSSWithSHA256-2052]
	_ = x[PSSWithSHA384-2053]
	_ = x[PSSWithSHA512-2054]
	_ = x[ECDSAWithP256AndSHA256-1027]
	_ = x[ECDSAWithP384AndSHA384-1283]
	_ = x[ECDSAWithP521AndSHA512-1539]
	_ = x[Ed25519-2055]
	_ = x[Ed448-2056]
	_ = x[PKCS1WithSHA1-513]
	_ = x[ECDSAWithSHA1-515]
	_ = x[KEMTLSWithSIKEp434-65024]
	_ = x[KEMTLSWithKyber512-65025]
	_ = x[PQTLSWithDilithium3-65121]
	_ = x[PQTLSWithDilithium4-65122]
}

const _SignatureScheme_name = "PKCS1WithSHA1ECDSAWithSHA1PKCS1WithSHA256ECDSAWithP256AndSHA256PKCS1WithSHA384ECDSAWithP384AndSHA384PKCS1WithSHA512ECDSAWithP521AndSHA512PSSWithSHA256PSSWithSHA384PSSWithSHA512Ed25519Ed448KEMTLSWithSIKEp434KEMTLSWithKyber512PQTLSWithDilithium3PQTLSWithDilithium4"

var _SignatureScheme_map = map[SignatureScheme]string{
	513:   _SignatureScheme_name[0:13],
	515:   _SignatureScheme_name[13:26],
	1025:  _SignatureScheme_name[26:41],
	1027:  _SignatureScheme_name[41:63],
	1281:  _SignatureScheme_name[63:78],
	1283:  _SignatureScheme_name[78:100],
	1537:  _SignatureScheme_name[100:115],
	1539:  _SignatureScheme_name[115:137],
	2052:  _SignatureScheme_name[137:150],
	2053:  _SignatureScheme_name[150:163],
	2054:  _SignatureScheme_name[163:176],
	2055:  _SignatureScheme_name[176:183],
	2056:  _SignatureScheme_name[183:188],
	65024: _SignatureScheme_name[188:206],
	65025: _SignatureScheme_name[206:224],
	65121: _SignatureScheme_name[224:243],
	65122: _SignatureScheme_name[243:262],
}

func (i SignatureScheme) String() string {
	if str, ok := _SignatureScheme_map[i]; ok {
		return str
	}
	return "SignatureScheme(" + strconv.FormatInt(int64(i), 10) + ")"
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CurveP256-23]
	_ = x[CurveP384-24]
	_ = x[CurveP521-25]
	_ = x[X25519-29]
}

const (
	_CurveID_name_0 = "CurveP256CurveP384CurveP521"
	_CurveID_name_1 = "X25519"
)

var (
	_CurveID_index_0 = [...]uint8{0, 9, 18, 27}
)

func (i CurveID) String() string {
	switch {
	case 23 <= i && i <= 25:
		i -= 23
		return _CurveID_name_0[_CurveID_index_0[i]:_CurveID_index_0[i+1]]
	case i == 29:
		return _CurveID_name_1
	default:
		return "CurveID(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NoClientCert-0]
	_ = x[RequestClientCert-1]
	_ = x[RequireAnyClientCert-2]
	_ = x[VerifyClientCertIfGiven-3]
	_ = x[RequireAndVerifyClientCert-4]
}

const _ClientAuthType_name = "NoClientCertRequestClientCertRequireAnyClientCertVerifyClientCertIfGivenRequireAndVerifyClientCert"

var _ClientAuthType_index = [...]uint8{0, 12, 29, 49, 72, 98}

func (i ClientAuthType) String() string {
	if i < 0 || i >= ClientAuthType(len(_ClientAuthType_index)-1) {
		return "ClientAuthType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ClientAuthType_name[_ClientAuthType_index[i]:_ClientAuthType_index[i+1]]
}
